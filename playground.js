var Web3 = require('@dreamfactoryhr/web3t');

//let web3 = new Web3("http://host.docker.internal");
let web3 = new Web3("http://127.0.0.1:8083");

const {
    pk1,
    address1,
    pk2,
    address2
} = require("./priv_keys.js");

// //console.log(acc1);

// await _web3.tolar.accounts.openRemote("verySafePassword");

// //console.log(acc2);

// let addresses = await _web3.tolar.accounts.listAddresses();

// console.log(addresses);

async function fetch() {
    await web3.tolar.getBlockCount()
}

// $(document).ready(async function() {
//     let res = await web3.tolar.getBlockCount();
// })

//web3.tolar.getBlockCount()

// web3.tolar.getBlockCount().then(res => {
//     //console.log(res)
//     web3.tolar.getLatestBalance(address1).then(console.log)
//     web3.tolar.getBalance(address2, 10000).then(console.log)
// }).catch(err => {
//     console.log()
// })

async function main() {

let receiver = web3.tolar.accounts.privateKeyToAccount(pk2);
let sender = web3.tolar.accounts.privateKeyToAccount(pk1);

        let nonce = await web3.tolar.getNonce(sender.address);
        console.log(nonce)
        let tx = {
            sender_address: sender.address,
            receiver_address: "54000000000000000000000000000000000000000023199e2b", //receiver.address,
            amount: 0,
            gas: 350000,
            gas_price: 1,
            data: "608060405234801561001057600080fd5b506040518060400160405280600c81526020017f48656c6c6f20776f726c642100000000000000000000000000000000000000008152506000908051906020019061005c929190610062565b506100ff565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a357805160ff19168380011785556100d1565b828001600101855582156100d1579182015b828111156100d05782518255916020019190600101906100b5565b5b5090506100de91906100e2565b5090565b5b808211156100fb5760008160009055506001016100e3565b5090565b6103088061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639698086b1461003b578063cfae3217146100f6575b600080fd5b6100f46004803603602081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460018302840111640100000000831117156100a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610179565b005b6100fe610193565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013e578082015181840152602081019050610123565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b806000908051906020019061018f929190610235565b5050565b606060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561022b5780601f106102005761010080835404028352916020019161022b565b820191906000526020600020905b81548152906001019060200180831161020e57829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061027657805160ff19168380011785556102a4565b828001600101855582156102a4579182015b828111156102a3578251825591602001919060010190610288565b5b5090506102b191906102b5565b5090565b5b808211156102ce5760008160009055506001016102b6565b509056fea26469706673582212201dd0b541c76e4234b37a99932323ccdaf91cd84ce6418e6486159c15d373b61d64736f6c634300060c0033",
            nonce,
        };
        //let signedTx = await sender.signTransaction(tx, sender.privateKey);

        //let sentSignedTxHash = await web3.tolar.TryCallTransaction (signedTx);

        let  t = await web3.tolar.tryCallTransaction(sender.address,
            "54000000000000000000000000000000000000000023199e2b",
            0,
            600000,
            1,
            "608060405234801561001057600080fd5b506040518060400160405280600c81526020017f48656c6c6f20776f726c642100000000000000000000000000000000000000008152506000908051906020019061005c929190610062565b506100ff565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a357805160ff19168380011785556100d1565b828001600101855582156100d1579182015b828111156100d05782518255916020019190600101906100b5565b5b5090506100de91906100e2565b5090565b5b808211156100fb5760008160009055506001016100e3565b5090565b6103088061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639698086b1461003b578063cfae3217146100f6575b600080fd5b6100f46004803603602081101561005157600080fd5b810190808035906020019064010000000081111561006e57600080fd5b82018360208201111561008057600080fd5b803590602001918460018302840111640100000000831117156100a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610179565b005b6100fe610193565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013e578082015181840152602081019050610123565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b806000908051906020019061018f929190610235565b5050565b606060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561022b5780601f106102005761010080835404028352916020019161022b565b820191906000526020600020905b81548152906001019060200180831161020e57829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061027657805160ff19168380011785556102a4565b828001600101855582156102a4579182015b828111156102a3578251825591602001919060010190610288565b5b5090506102b191906102b5565b5090565b5b808211156102ce5760008160009055506001016102b6565b509056fea26469706673582212201dd0b541c76e4234b37a99932323ccdaf91cd84ce6418e6486159c15d373b61d64736f6c634300060c0033",
            nonce);

        //console.log(sentSignedTxHash);
        console.log(t);

    }

main()
  .then(() => process.exit(0))
  .catch(err => {
    console.log(err);
    process.exit(1)
  });

// let receiver = web3.tolar.accounts.privateKeyToAccount(pk2);
// web3.tolar.getLatestBalance(receiver.address).then(console.log)
//web3.tolar.getTransaction("abe52ad1502ab81daead4876135265f6435ff5fc55a816d536ecaff690533f8c").then(console.log)

